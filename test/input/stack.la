module Prelude =
  external ll_putint : int -> ()
  external ll_print_line : () -> ()
  external ll_get_ith_elem_of_int_array : int array -> int -> int
  external ll_set_ith_elem_of_int_array : int array -> int -> int -> ()
  external ll_new_int_array : int -> int array
  external ll_print_bool : bool -> ()

  let ln () : () = ll_print_line ()

  let printi x = 
    ll_putint x

  let printin x = 
    ll_putint x
    ln () 

  let putbool b =
    ll_print_bool b
    ln ()

  let rec iter n fn = 
    if n > 0 
    then 
      fn () 
      iter (n - 1) fn 

  let iteri n fn = 
    let rec go ix = 
      if ix < n 
      then 
        fn ix 
        go (ix + 1)

    go 0 

  module Array = 
    let new size : int array = 
      ll_new_int_array size

    let set (arr : int array) ix elem = 
      ll_set_ith_elem_of_int_array  arr ix elem

    let get arr ix = 
      ll_get_ith_elem_of_int_array arr ix

    let printn arr size = 
      let rec aux pos left = 
        if left = 0 
        then ln ()
        else printin (get arr pos)
             aux (pos + 1) (left - 1)

      aux 0 size

    let clone_array old_arr size = 
        let arr2 = new size 
        let copy_ith ix = set arr2 ix (get old_arr ix) 
        iteri size copy_ith
        arr2

open Prelude

module Stack =
    type t = 
        { size     : int
          capacity : int  
          data     : int array
        }

    let create capacity = 
        { size     = 0
          capacity = capacity
          data     = Array.new capacity 
        }

    let top (stack : t) = 
        Array.get stack.data (stack.size - 1)  

    let push (stack : t) elem = 
        let new_data = Array.clone_array stack.data stack.capacity 
        Array.set new_data stack.size elem

        { stack with 
            size     = stack.size + 1
            capacity = stack.capacity 
            data     = new_data            
        }

    let pop (stack : t) = { stack with size = stack.size - 1 }
    
let main = 
  let s0 = Stack.create 30
  let s1 = Stack.push s0 11
  let s2 = Stack.push s1 12
  let s3 = Stack.push s2 13

  ()
  printin (Stack.top s1) 
  printin (Stack.top s2) 
  printin (Stack.top s3)

  let s3to2 = Stack.pop s3 
  printin (Stack.top s3to2)
  printin (Stack.top s3)
 
  let s3to2to1 = Stack.pop (Stack.pop s3)
  printin (Stack.top s3to2to1)
  printin (Stack.top s3)
