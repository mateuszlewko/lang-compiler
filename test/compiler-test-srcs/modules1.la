(* This file can be used as a template for further testing *)

module Prelude =
  external ll_putint : int -> ()
  external ll_print_line : () -> ()
  external ll_get_ith_elem_of_int_array : int array -> int -> int
  external ll_set_ith_elem_of_int_array : int array -> int -> int -> ()
  external ll_new_int_array : int -> int array
  external ll_print_bool : bool -> ()

  let ln () : () = ll_print_line ()

  let printi x : () = ll_putint x


  let printin x : () = ll_putint x
                       ln () 

  let putint : int -> () = printin

  let putbool (b : bool) : () =
    ll_print_bool b
    ln ()

  module Array = 
    let new size : int array = 
      ll_new_int_array size

    let set (arr : int array) ix elem : () = 
      ll_set_ith_elem_of_int_array  arr ix elem

    let get (arr : int array) ix = 
      ll_get_ith_elem_of_int_array arr ix

    let printn (arr : int array) size : () = 
      let rec aux (arr : int array) pos left : () = 
        if left = 0 
        then ln ()
        else printin (get arr pos)
             aux arr (pos + 1) (left - 1)

      aux arr 0 size

open Prelude

let zero = 0

module A = 
  let testA = 1

  module B = 
    let testB  = 2
    (* we can use values define in outer scope *)
    let testB2 = testA + testB + zero

  let testA = 4 (* overrides previous definition of testA *)

let testA = 999

open A (* opening module A will override top-level definition of testA *)

let main () : int =

  putint testA 
  Prelude.putint A.testA (* we can use qualified name although 
                            Prelude has been opened *)
  Prelude.putint B.testB (* we opened module A so module B is available *)

  putint A.B.testB2 (* qualified name is still fine *)

  0