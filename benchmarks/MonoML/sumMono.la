module Prelude =
  external ll_putint : int -> ()
  external ll_print_line : () -> ()

  let printn_int x : () = 
    ll_putint x
    ll_print_line () 

open Prelude

let add (x : int) (y : int) = x + y 

let rec sumMono n (curr : int) (x : int) = 
    if n = 0 then curr 
    else sumMono (n - 1) (add curr x) x 

let rec iter n count (init : int) (change : int) = 
    if n > 0
    then 
        sumMono count init change
        iter (n - 1) count init change
    else sumMono count init change

let _ =
  printn_int (iter 10000 10000 12 2)
  