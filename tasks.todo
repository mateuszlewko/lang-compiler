Lexer:

Codegen:
    ✔ suppress all debug prints (use logging) @critical @done(18-08-25 14:51)
    ❑ multiple global variables with same name
    ✔ array literal @critical @done(18-08-25 17:09)

General:
    ❑ add more working tests (maybe try implementing something real-life) @critical 

Bugs:
    ❑ function redefinitions detected in llvmgateway 
    ✔ make generic types different in separate top let expressions @critical @done(18-08-24 16:28)

Archive:
  ✔ lex tokens @done @project(Lexer)
  ✔ handle in grammar (type is either specified of integer) @done(18-01-09 00:40) @project(Parser)
  ✔ mutually recursive functions @done(18-06-08 19:23) @project(Codegen)
  ✘ mutually recursive nested functions @today @cancelled(18-06-13 22:26) @project(Codegen)
  ✘ generic arrays @cancelled(18-08-14 20:13) @project(Codegen)
  ✔ top level expressions @done(18-08-14 20:13) @project(Codegen)
  ✘ float type with literals @medium @cancelled(18-08-14 20:13) @project(Codegen)
  ✘ arithmetic operations (float) @medium @cancelled(18-08-14 20:13) @project(Codegen)
  ✘ simple boehm gc @cancelled(18-08-14 20:13) @project(Codegen)
  ✔ if-then-else @done(18-01-15 02:45) @project(Parser)
  ✘ lists @cancelled(18-08-14 20:13) @project(Codegen)
  ✘ lambda (fun or =>) @cancelled(18-08-14 20:14) @project(Codegen)
  ✘ tuples @cancelled(18-06-08 20:57) @project(Codegen)
  ✘ tuples pattern matching @cancelled(18-06-06 20:44) @project(Codegen)
  ✘ ref @cancelled(18-08-14 20:14) @project(Codegen)
  ✘ function keyword or similar (pattern matching) @cancelled(18-06-06 20:43) @project(Codegen)
  ✘ algebraic types (unions / variants) @cancelled(18-06-06 20:42) @project(Codegen)
  ✘ match (...) with (...) expression @cancelled(18-06-06 20:42) @project(Codegen)
  ✔ if-then-elif @high @today @done(18-01-18 18:31) @project(Parser)
  ✘ type string @medium @optional @cancelled(18-08-14 20:14) @project(Codegen)
  ✘ type char @medium @optional @cancelled(18-08-14 20:14) @project(Codegen)
  ✘ multi-file programs @low @optional @cancelled(18-05-22 23:31) @project(Codegen)
  ✔ value expression instead of closure conversion and lifting when letexp is value @done(18-05-21 19:57) @project(Optimisations)
  ✘ no closure conversion when there is no free variables @cancelled(18-08-14 20:14) @project(Optimisations)
  ✘ unboxed structures when possible @cancelled(18-08-14 20:14) @project(Optimisations)
  ✔ let rec @done(18-01-18 19:55) @project(Parser)
  ✔ fix if-else codegen (something with env) @critical @today @done(18-08-24 01:06) @project(Bugs)
  ✔ fix nested functions in type annotation @critical @done(18-05-30 01:51) @project(Bugs)
  ✔ earlier functions not visible for nested let (types_ast.ml:of_tops) @critical @done(18-08-24 01:06) @project(Bugs)
  ✔ fix nested let @critical @done(18-05-18 00:35) @project(Bugs)
  ✔ closure conversion @today @done(18-05-18 00:35) @project(Bugs)
  ✔ lambda lifting @today @done(18-05-18 00:35) @project(Bugs)
  ✔ label / assign expression in typed ast @today @done(18-05-18 01:35) @project(Bugs)
  ✔ modules & open @done(18-01-19 03:29) @project(Parser)
  ✔ nested functions can't access values from outer scope (not global) @critical @done(18-01-26 22:35) @project(Bugs)
  ✔ let-value in another let expression body may not be correct @done(18-01-23 17:47) @project(Bugs)
  ✔ adding int constant to variable may not work @done(18-01-23 17:13) @project(Bugs)
  ✔ can't reference symbols from parent module @critical @done(18-01-24 01:01) @project(Bugs)
  ✔ functions with same name should overwrite previous declarations @critical @done(18-01-26 22:39) @project(Bugs)
  ✔ application should accept list of simple expr @done(18-01-23 23:21) @project(Bugs)
  ✔ application in first line of let @done(18-01-24 00:11) @project(Bugs)
  ✔ if-then-elif-else should accept complex expression and indented expressions @done(18-01-24 00:11) @project(Bugs)
  ✔ segfault when top-value returns function @critical @done(18-01-21 15:30) @project(Bugs)
  ✔ extern @done(18-01-16 02:48) @project(Parser)
  ✔ Tests! @critical @done(18-01-27 03:16) @project(Other)
  ✔ source code compiler @high @today @done(18-01-22 19:53) @project(Other)
  ✔ ast pretty-printer @high @done(18-01-10 01:21) @project(Other)
  ✘ interpreter @optional @cancelled(18-05-22 23:31) @project(Other)
  ✘ handle infix operators of different priority @optional @cancelled(18-05-22 23:31) @project(Other)
  ✔ arrays @today @done(18-01-21 16:46) @project(Parser)
  ✔ complex expression in if @today @done(18-01-24 00:44) @project(Parser)
  ✔ correct priority of operators @done(18-01-26 23:17) @project(Parser)
  ✔ indentation sensitive @done @project(Lexer)
  ✘ proper (improved) parsing @medium @cancelled(18-08-14 20:13) @project(Parser)
  ✔ record types @done(18-05-21 01:45) @project(Parser)
  ✔ record field get @done(18-05-21 21:54) @project(Parser)
  ✔ record literal @done(18-05-22 01:53) @project(Parser)
  ✔ record field update @today @done(18-05-22 18:55) @project(Parser)
  ✔ type class declaration @today @done(18-05-30 01:50) @project(Parser.type classes)
  ✔ type class annotation @today @done(18-05-30 01:50) @project(Parser.type classes)
  ✔ skip comments @done @project(Lexer)
  ✔ mutually recursive let-exps @done(18-06-06 21:31) @project(Parser)
  ✘ lambda (fun or =>) @cancelled(18-08-14 20:13) @project(Parser)
  ✘ mutable var @cancelled(18-08-14 20:13) @project(Parser)
  ✘ lists @cancelled(18-06-06 21:00) @project(Parser)
  ✘ tuples @cancelled(18-06-06 21:00) @project(Parser)
  ✘ tuples pattern matching @cancelled(18-06-06 21:00) @project(Parser)
  ✘ match (...) with (...) @cancelled(18-06-06 20:59) @project(Parser)
  ✘ function keyword or similar (pattern matching) @cancelled(18-06-06 21:00) @project(Parser)
  ✘ algebraic types (unions / variants) @cancelled(18-06-06 21:00) @project(Parser)
  ✔ let-exp @high @done(18-01-15 01:08) @project(Codegen)
  ✔ if-then-else @done(18-01-15 21:21) @project(Codegen)
  ✔ if-then (no else) @high @today @done(18-01-18 03:32) @project(Codegen)
  ✔ if-then-elif @high @today @done(18-01-18 19:35) @project(Codegen)
  ✔ extern @high @today @done(18-01-16 22:16) @project(Codegen)
  ✔ application @high @done(18-01-17 03:59) @project(Codegen)
  ✔ main / entry point @high @done(18-01-17 03:59) @project(Codegen)
  ✔ let rec @high @done(18-01-18 21:15) @project(Codegen)
  ✔ first-class functions @done(18-01-19 02:11) @project(Codegen)
  ✔ let as value @high @today @done(18-01-21 02:52) @project(Codegen)
  ✔ modules & open @medium @done(18-01-20 22:21) @project(Codegen)
  ✔ operators: <=, >=, <> @high @done(18-01-21 04:27) @project(Codegen)
  ✔ array operations: new, set, get @high @today @done(18-01-21 23:08) @project(Codegen)
  ✔ array literal with ints @high  @today @done(18-01-21 22:59) @project(Codegen)
  ✔ tail call @done(18-01-21 23:46) @project(Codegen)
  ✔ entire program generation (single file) @high @done(18-01-17 11:39) @project(Codegen)
  ✔ arithmetic operations (int) @high @done(18-01-14 23:24) @project(Codegen)
  ✔ improved error handling @medium @done(18-01-22 00:54) @project(Codegen)
  ✔ ast @done @project(Parser)
  ✔ partial application @high @today @done(18-05-15 23:50) @project(Codegen)
  ✔ pre-* function which returns closure @done(18-04-13 00:55) @project(Codegen)
  ✔ pre-* function which returns value @done(18-05-08 23:29) @project(Codegen)
  ✔ call-site @done(18-05-08 23:29) @project(Codegen)
  ✔ return PAPP @done(18-05-08 23:29) @project(Codegen)
  ✔ application @done(18-05-15 23:50) @project(Codegen)
  ✔ call known apply @done(18-05-11 19:17) @project(Codegen)
  ✔ call closure apply @done(18-05-15 23:50) @project(Codegen)
  ✔ call value apply @done(18-05-14 04:09) @project(Codegen)
  ✔ basic expressions parser (ast, program) @done @project(Parser)
  ✔ function generation @done(18-05-15 23:50) @project(Codegen)
  ✔ add global array of function pointers @done(18-05-12 18:52) @project(Codegen)
  ✔ move array pointer on argument apply @done(18-05-12 22:05) @project(Codegen)
  ✔ returning closure @done(18-05-14 04:09) @project(Codegen)
  ✔ returning value @done(18-05-14 04:09) @project(Codegen)
  ✔ applying known function with more arguments than defined @today @critical @done(18-05-18 18:09) @project(Codegen)
  ✔ fix passing known function as argument @today @done(18-05-18 18:41) @project(Codegen)
  ✔ fix external functions @today @done(18-05-18 20:09) @project(Codegen)
  ✔ top level values (defined with let) with side effects @today @done(18-05-19 01:15) @project(Codegen)
  ✔ implement modules @today @done(18-05-19 03:01) @project(Codegen)
  ✔ add types annotation: @done(18-01-09 00:40) @project(Parser)
  ✔ implement open in typed ast @today @done(18-05-19 16:27) @project(Codegen)
  ✔ field get @done(18-05-22 23:52) @project(Codegen.record types and operations)
  ✔ field update @done(18-05-23 21:13) @project(Codegen.record types and operations)
  ✔ record literal @done(18-05-23 19:12) @project(Codegen.record types and operations)
  ✔ let-polymorphism @done(18-05-26 23:24) @project(Codegen)
  ✘ generics in return type (for example in case of partial application) @today @cancelled(18-08-14 20:13) @project(Codegen)
  ✔ ast @done(18-01-09 00:40) @project(Parser)
  ✔ basic type unification @done(18-06-04 01:14) @project(Codegen.simple type inference (with let-polymorphism))
  ✔ unify if-cond with bool and if branches with each other @done(18-06-04 02:53) @project(Codegen.simple type inference (with let-polymorphism))
  ✔ unify single generic type with function application @today @done(18-06-10 01:31) @project(Codegen.simple type inference (with let-polymorphism))
  ✔ let-rec @done(18-06-08 19:23) @project(Codegen.simple type inference (with let-polymorphism))
  ✔ mutually recursive functions @done(18-06-08 19:23) @project(Codegen.simple type inference (with let-polymorphism))
  ✔ basic type classes @today @done(18-06-04 01:16) @project(Codegen)
  ✔ type inference with type classes @today @done(18-08-14 20:13) @project(Codegen)
