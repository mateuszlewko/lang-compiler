Lexer:
    ✔ lex tokens @done
    ✔ indentation sensitive @done
    ✔ skip comments @done

Parser:
    ✔ ast @done
    ✔ basic expressions parser (ast, program) @done
    ✔ add types annotation: @done(18-01-09 00:40)
        ✔ ast @done(18-01-09 00:40)
        ✔ handle in grammar (type is either specified of integer) @done(18-01-09 00:40)
    ✔ if-then-else @done(18-01-15 02:45)
    ✔ if-then-elif @high @today @done(18-01-18 18:31)
    ✔ let rec @done(18-01-18 19:55)
    ✔ modules & open @done(18-01-19 03:29)
    ✔ extern @done(18-01-16 02:48)
    ✔ arrays @today @done(18-01-21 16:46)
    ❑ complex expression in if @today
    ❑ correct priority of operators

    ❑ lambda fun
    ❑ lists
    ❑ record types
    ❑ mutable var
    ❑ tuples
    ❑ tuples pattern matching
    ❑ match (...) with (...)
    ❑ function (pattern matching)
    ❑ algebraic types (unions / variants)


Codegen:
    ✔ let-exp @high @done(18-01-15 01:08)
    ✔ if-then-else @done(18-01-15 21:21)
    ✔ if-then (no else) @high @today @done(18-01-18 03:32)
    ✔ if-then-elif @high @today @done(18-01-18 19:35)
    ✔ extern @high @today @done(18-01-16 22:16)
    ✔ application @high @done(18-01-17 03:59)
    ✔ main / entry point @high @done(18-01-17 03:59)
    ✔ let rec @high @done(18-01-18 21:15)
    ✔ first-class functions @done(18-01-19 02:11)
    ✔ let as value @high @today @done(18-01-21 02:52)
    ✔ modules & open @medium @done(18-01-20 22:21)
    ✔ operators: <=, >=, <> @high @done(18-01-21 04:27)
    ✔ array operations: new, set, get @high @today @done(18-01-21 23:08)
    ✔ array literal with ints @high  @today @done(18-01-21 22:59)
    ✔ tail call @done(18-01-21 23:46)

    ❑ type checking @medium
    ❑ currying @medium
    ❑ curried application @medium
    ❑ type char @medium
    ❑ type float @medium
    ❑ arithmetic operations (float) @high
    ✔ entire program generation (single file) @high @done(18-01-17 11:39)
    ✔ arithmetic operations (int) @high @done(18-01-14 23:24)
    ✔ improved error handling @medium @done(18-01-22 00:54)
    ❑ multi-file programs @low @optional

Bugs:
    ❑ application should accept list of simple expr
    ❑ let-value in another let expression body may not be correct
    ❑ can't reference symbols from parent module @critical
    ❑ complex expression in first line of let
    ✔ segfault when top-value returns function @critical @done(18-01-21 15:30)
    ❑ functions with same name should overwrite previous declarations @critical
    ❑ if-then-elif-else should accept complex expression and indented expressions

Syntactic check:
    ❑ types @high

Other:
    ❑ Tests! @critical
    ❑ source code compiler @high
    ✔ ast pretty-printer @high @done(18-01-10 01:21)
    ❑ interpreter @optional
    ❑ handle infix operators of different priority