Lexer:
    ✔ lex tokens @done
    ✔ indentation sensitive @done
    ✔ skip comments @done

Parser:
    ✔ ast @done
    ✔ basic expressions parser (ast, program) @done
    ✔ add types annotation: @done(18-01-09 00:40)
        ✔ ast @done(18-01-09 00:40)
        ✔ handle in grammar (type is either specified of integer) @done(18-01-09 00:40)
    ✔ if-then-else @done(18-01-15 02:45)
    ✔ if-then-elif @high @today @done(18-01-18 18:31)
    ✔ let rec @done(18-01-18 19:55)
    ✔ modules & open @done(18-01-19 03:29)
    ✔ extern @done(18-01-16 02:48)
    ✔ arrays @today @done(18-01-21 16:46)
    ✔ complex expression in if @today @done(18-01-24 00:44)
    ✔ correct priority of operators @done(18-01-26 23:17)

    ❑ proper (improved) parsing @high 

    ✔ record types @done(18-05-21 01:45)
    ✔ record field get @done(18-05-21 21:54)
    ✔ record literal @done(18-05-22 01:53)
    ✔ record field update @today @done(18-05-22 18:55)

    type classes:
        ✔ type class declaration @today @done(18-05-30 01:50)
        ✔ type class annotation @today @done(18-05-30 01:50)
        
    ❑ lambda (fun or =>)
    ❑ mutable var
    ❑ lists
    ❑ tuples
    ❑ tuples pattern matching
    ❑ match (...) with (...)
    ❑ function keyword or similar (pattern matching)
    ❑ algebraic types (unions / variants)

Codegen:
    ✔ let-exp @high @done(18-01-15 01:08)
    ✔ if-then-else @done(18-01-15 21:21)
    ✔ if-then (no else) @high @today @done(18-01-18 03:32)
    ✔ if-then-elif @high @today @done(18-01-18 19:35)
    ✔ extern @high @today @done(18-01-16 22:16)
    ✔ application @high @done(18-01-17 03:59)
    ✔ main / entry point @high @done(18-01-17 03:59)
    ✔ let rec @high @done(18-01-18 21:15)
    ✔ first-class functions @done(18-01-19 02:11)
    ✔ let as value @high @today @done(18-01-21 02:52)
    ✔ modules & open @medium @done(18-01-20 22:21)
    ✔ operators: <=, >=, <> @high @done(18-01-21 04:27)
    ✔ array operations: new, set, get @high @today @done(18-01-21 23:08)
    ✔ array literal with ints @high  @today @done(18-01-21 22:59)
    ✔ tail call @done(18-01-21 23:46)
    ✔ entire program generation (single file) @high @done(18-01-17 11:39)
    ✔ arithmetic operations (int) @high @done(18-01-14 23:24)
    ✔ improved error handling @medium @done(18-01-22 00:54)

    ✔ partial application @high @today @done(18-05-15 23:50)
        ✔ pre-* function which returns closure @done(18-04-13 00:55)
        ✔ pre-* function which returns value @done(18-05-08 23:29)
        ✔ call-site @done(18-05-08 23:29)
        ✔ return PAPP @done(18-05-08 23:29)
        ✔ application @done(18-05-15 23:50)
            ✔ call known apply @done(18-05-11 19:17)
            ✔ call closure apply @done(18-05-15 23:50)
            ✔ call value apply @done(18-05-14 04:09)
        ✔ function generation @done(18-05-15 23:50)
            ✔ add global array of function pointers @done(18-05-12 18:52)
            ✔ move array pointer on argument apply @done(18-05-12 22:05)
            ✔ returning closure @done(18-05-14 04:09)
            ✔ returning value @done(18-05-14 04:09)
    ✔ applying known function with more arguments than defined @today @critical @done(18-05-18 18:09)
    ✔ fix passing known function as argument @today @done(18-05-18 18:41)
    ✔ fix external functions @today @done(18-05-18 20:09)
    ✔ top level values (defined with let) with side effects @today @done(18-05-19 01:15)
    ✔ implement modules @today @done(18-05-19 03:01)
    ✔ implement open in typed ast @today @done(18-05-19 16:27)
    ❑ multiple global variables with same name @critical 

    record types and operations:
        ✔ field get @done(18-05-22 23:52)
        ✔ field update @done(18-05-23 21:13)
        ✔ record literal @done(18-05-23 19:12)

    ✔ let-polymorphism @done(18-05-26 23:24)
    ❑ generics in return return type (for example in case of partial application)

    ❑ simple type inference (with let-polymorphism)
   
    ❑ type classes
    ❑ type inference with type classes

    ❑ generic arrays
    ❑ mutually recursive functions
    ❑ top level expressions 
    ❑ float type with literals @medium
    ❑ arithmetic operations (float) @medium

    ❑ simple boehm gc

    ❑ algebraic types (unions / variants)
    ❑ match (...) with (...) expression
    ❑ lists
    ❑ lambda (fun or =>)
    ❑ tuples
    ❑ tuples pattern matching
    ❑ function keyword or similar (pattern matching)

    ❑ mutable var

    ❑ type string @medium @optional 
    ❑ type char @medium @optional 
    ✘ multi-file programs @low @optional @cancelled(18-05-22 23:31)

Optimisations: @optional
    ✔ value expression instead of closure conversion and lifting when letexp is value @done(18-05-21 19:57)
    ❑ no closure conversion when there is no free variables
    ❑ unboxed structures

Bugs:
    ❑ fix if-else codegen (something with env) @critical 
    ✔ fix nested functions in type annotation @critical @done(18-05-30 01:51)
    ❑ function redefinitions detected in llvmgateway
    ✔ fix nested let @critical @done(18-05-18 00:35)
        ✔ closure conversion @today @done(18-05-18 00:35)
        ✔ lambda lifting @today @done(18-05-18 00:35)
        ✔ label / assign expression in typed ast @today @done(18-05-18 01:35)
    ✔ nested functions can't access values from outer scope (not global) @critical @done(18-01-26 22:35)
    ✔ let-value in another let expression body may not be correct @done(18-01-23 17:47)
    ✔ adding int constant to variable may not work @done(18-01-23 17:13)
    ✔ can't reference symbols from parent module @critical @done(18-01-24 01:01)
    ✔ functions with same name should overwrite previous declarations @critical @done(18-01-26 22:39)
    ✔ application should accept list of simple expr @done(18-01-23 23:21)
    ✔ application in first line of let @done(18-01-24 00:11)
    ✔ if-then-elif-else should accept complex expression and indented expressions @done(18-01-24 00:11)
    ✔ segfault when top-value returns function @critical @done(18-01-21 15:30)

Other:
    ✔ Tests! @critical @done(18-01-27 03:16)
    ✔ source code compiler @high @today @done(18-01-22 19:53)
    ✔ ast pretty-printer @high @done(18-01-10 01:21)
    ✘ interpreter @optional @cancelled(18-05-22 23:31)
    ✘ handle infix operators of different priority @optional @cancelled(18-05-22 23:31)