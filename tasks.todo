Lexer:
    ✔ lex tokens @done
    ✔ indentation sensitive @done
    ✔ skip comments @done

Parser:
    ✔ ast @done
    ✔ basic expressions parser (ast, program) @done
    ✔ add types annotation: @done(18-01-09 00:40)
        ✔ ast @done(18-01-09 00:40)
        ✔ handle in grammar (type is either specified of integer) @done(18-01-09 00:40)
    ✔ if-then-else @done(18-01-15 02:45)
    ✔ if-then-elif @high @today @done(18-01-18 18:31)
    ✔ let rec @done(18-01-18 19:55)
    ✔ modules & open @done(18-01-19 03:29)
    ✔ extern @done(18-01-16 02:48)
    ✔ arrays @today @done(18-01-21 16:46)
    ✔ complex expression in if @today @done(18-01-24 00:44)
    ✔ correct priority of operators @done(18-01-26 23:17)

    ❑ proper (improved) parsing @critical

    ❑ record types
    ❑ lambda (fun or =>)
    ❑ mutable var
    ❑ lists
    ❑ tuples
    ❑ tuples pattern matching
    ❑ match (...) with (...)
    ❑ function keyword or similar (pattern matching)
    ❑ algebraic types (unions / variants)

Codegen:
    ✔ let-exp @high @done(18-01-15 01:08)
    ✔ if-then-else @done(18-01-15 21:21)
    ✔ if-then (no else) @high @today @done(18-01-18 03:32)
    ✔ if-then-elif @high @today @done(18-01-18 19:35)
    ✔ extern @high @today @done(18-01-16 22:16)
    ✔ application @high @done(18-01-17 03:59)
    ✔ main / entry point @high @done(18-01-17 03:59)
    ✔ let rec @high @done(18-01-18 21:15)
    ✔ first-class functions @done(18-01-19 02:11)
    ✔ let as value @high @today @done(18-01-21 02:52)
    ✔ modules & open @medium @done(18-01-20 22:21)
    ✔ operators: <=, >=, <> @high @done(18-01-21 04:27)
    ✔ array operations: new, set, get @high @today @done(18-01-21 23:08)
    ✔ array literal with ints @high  @today @done(18-01-21 22:59)
    ✔ tail call @done(18-01-21 23:46)
    ✔ entire program generation (single file) @high @done(18-01-17 11:39)
    ✔ arithmetic operations (int) @high @done(18-01-14 23:24)
    ✔ improved error handling @medium @done(18-01-22 00:54)

    ❑ partial application @high @today
        ✔ pre-* function which returns closure @done(18-04-13 00:55)
        ✔ pre-* function which returns value @done(18-05-08 23:29)
        ✔ call-site @done(18-05-08 23:29)
        ✔ return PAPP @done(18-05-08 23:29)
        ❑ application
            ✔ call known apply @done(18-05-11 19:17)
            ❑ call closure apply 
            ✔ call value apply @done(18-05-14 04:09)
        ❑ function generation 
            ✔ add global array of function pointers @done(18-05-12 18:52)
            ✔ move array pointer on argument apply @done(18-05-12 22:05)
            ✔ returning closure @done(18-05-14 04:09)
            ✔ returning value @done(18-05-14 04:09)

    ❑ record types
    ❑ mutually recursive functions
    ❑ let-polymorphism
    ❑ type float @medium
    ❑ type checking / basic type inference @high
    ❑ arithmetic operations (float) @medium

    ❑ type classes
    ❑ type inference with type classes

    ❑ lambda (fun or =>)
    ❑ mutable var
    ❑ lists
    ❑ tuples
    ❑ tuples pattern matching
    ❑ match (...) with (...)
    ❑ function keyword or similar (pattern matching)
    ❑ algebraic types (unions / variants)

    ❑ type char @medium
    // ❑ multi-file programs @low @optional


Bugs:
    ❑ fix nested let @critical 
        ❑ closure conversion 
        ❑ lambda lifting
    ✔ nested functions can't access values from outer scope (not global) @critical @done(18-01-26 22:35)
    ✔ let-value in another let expression body may not be correct @done(18-01-23 17:47)
    ✔ adding int constant to variable may not work @done(18-01-23 17:13)
    ✔ can't reference symbols from parent module @critical @done(18-01-24 01:01)
    ✔ functions with same name should overwrite previous declarations @critical @done(18-01-26 22:39)
    ✔ application should accept list of simple expr @done(18-01-23 23:21)
    ✔ application in first line of let @done(18-01-24 00:11)
    ✔ if-then-elif-else should accept complex expression and indented expressions @done(18-01-24 00:11)
    ✔ segfault when top-value returns function @critical @done(18-01-21 15:30)

Other:
    ✔ Tests! @critical @done(18-01-27 03:16)
    ✔ source code compiler @high @today @done(18-01-22 19:53)
    ✔ ast pretty-printer @high @done(18-01-10 01:21)
    // ❑ interpreter @optional
    // ❑ handle infix operators of different priority @optional