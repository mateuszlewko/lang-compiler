(* let adder5 a b c d e = a + b + c + d + e 

let adder3 a b c : int -> int -> int = 
    adder5 a b c

let apply2 which (f3 : int -> int -> int) (g3 : int -> int -> int) () = 
    if which = 1
    then (f3 1 2) + (f3 3 10) 
    elif which = 2 
    then (f3 1 2) + (f3 3 11)
    else (f3 1 2) + (f3 3 12)

let rec test (fn : unit -> int) cnt = 
    if cnt = 0
    then fn ()
    else 
        fn ()
        test fn (cnt - 1) *)

let adder5b a b c : int -> int -> int = 
    let innerAdder d e = 
        a + b + c + d + e

    innerAdder

(* let main () = test (apply2 2 (adder3 5 6 7) (adder3 8 9 10)) 100000000  *)

let main () =
    let tmp (fn : int -> int -> int -> int -> int -> int) x y : int -> int -> int = 
        fn x y 3
    (* let tmp2 : int -> int -> int = tmp 1 2
    let tmp3 : int -> int -> int = tmp2 *)
    (* let my_fn x : int -> int -> int -> int -> int = adder5b x *)
    let a1 x : int -> int = (tmp adder5b 1 x) -3
    (a1 2 0) + (a1 3 0)

(* let main () =
    (test1 100 2 100) 10 11 *)

(* OCaml version *)
(*
let adder5 a b c d e = a + b + c + d + e 

let adder3 a b c : int -> int -> int = 
    adder5 a b c

let apply2 which (f3 : int -> int -> int) (g3 : int -> int -> int) () = 
    if which = 1
    then (f3 1 2) + (f3 3 10) 
    else if which = 2 
    then (f3 1 2) + (f3 3 11)
    else (f3 1 2) + (f3 3 12)

let rec test (fn : unit -> int) cnt = 
    if cnt = 0
    then fn ()
    else (
        fn ();
        test fn (cnt - 1)
    )

let main  = test (apply2 2 (adder3 5 6 7) (adder3 8 9 10)) 100000000

*)