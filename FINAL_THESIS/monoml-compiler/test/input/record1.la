module Prelude = 
    external ll_putint     : int -> () 
    external ll_print_line : ()  -> () 

    let print_int : int -> () = ll_putint
    let print_nl  : ()  -> () = ll_print_line
    let printn_int x : () = 
        print_int x 
        print_nl () 

open Prelude

type point2 = { x : int
                y : int }

type point3 = { x : int; y : int ;
                z : int }

let pass_record (r : point3) : () = 
    printn_int (r.x)
    printn_int (r.y)
    printn_int (r.z + -2)
    print_nl ()

let adder a b = a + b

let _ : () = 
    let p2 : point2 = { x = 1; y = 2} 
    let p3 : point3 = 
        { x = 10
          y = 1000000 
          z = -10 
        }

    printn_int (p2 . y)
    print_nl ()

    printn_int (p3.y)
    printn_int (p3.z + -2)
    print_nl ()
    pass_record p3
    let p3b : point3 = { p3 with z = -9; y = adder 1 2; x = p3.x - 1 }
    pass_record p3
    pass_record p3b