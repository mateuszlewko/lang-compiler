module Prelude = 
    external ll_putint     : int -> () 
    external ll_print_line : ()  -> () 

    let printInt (x : int) : () = ll_putint x
    let printNl : () -> () = ll_print_line
    let printnInt x = 
        printInt x 
        printNl () 

open Prelude

let rec factorial x = 
    if x = 0 
    then 1 
    else x * factorial (x - 1)

let rec fix f n = f (fix f) n

let factorialF self n = 
    if n = 0 then 1 else n * (self (n - 1))

let factorialFix n = fix factorialF n

let _ = 
    printnInt (factorialFix 5)
    printnInt (factorial 5)