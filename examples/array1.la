
let id1 x = x 
module SomeInnerMod = 

  let adder x y = 

    let innerAdder z = (id1 x) + y + z
    innerAdder x

  module DoubleInner = 
    let justAdd x y = 
      adder x y 

module Prelude =
  external ll_putint : int -> ()
  external ll_print_line : () -> ()
  external ll_get_ith_elem_of_int_array : int array -> int -> int
  external ll_set_ith_elem_of_int_array : int array -> int -> int -> ()
  external ll_new_int_array : int -> int array
  external ll_print_bool : bool -> ()

  let ln () : () = ll_print_line ()

  let printi x : () = ll_putint x

  let printin x : () = 
    ll_putint x
    ln () 

  let putbool (b : bool) : () =
    ll_print_bool b
    ln ()

  module Array = 
    let new size : int array = 
      ll_new_int_array size

    let set (arr : int array) ix elem : () = 
      ll_set_ith_elem_of_int_array  arr ix elem

    let get (arr : int array) ix = 
      ll_get_ith_elem_of_int_array arr ix

    let printn (arr : int array) size : () = 
      let rec aux get ln (arr : int array) pos left : () = 
        if left = 0 
        then ln ()
        else 
          printin (get arr pos)
          aux get ln arr (pos + 1) (left - 1)

      aux get ln arr 0 size

open Prelude

let main () : int =
  let ar : int array = Array.new 10
  Array.set ar 0 1
  Array.set ar 1 2
  Array.set ar 2 4
  Array.set ar 0 9

  Array.printn ar 10

  0