(* This file can be used as a template for further testing *)

module Prelude =
  external ll_putint : int -> ()
  external ll_print_line : () -> ()
  external ll_get_ith_elem_of_int_array : int array -> int -> int
  external ll_set_ith_elem_of_int_array : int array -> int -> int -> ()
  external ll_new_int_array : int -> int array

  let ln () : () = ll_print_line ()

  let printi x : () = ll_putint x

  let printin x : () = ll_putint x
                       ln () 

  module Array = 
    let new size : int array = 
      ll_new_int_array size

    let set (arr : int array) ix elem : () = 
      ll_set_ith_elem_of_int_array  arr ix elem

    let get (arr : int array) ix = 
      ll_get_ith_elem_of_int_array arr ix

    let printn (arr : int array) size : () = 
      (* let arr2 : int array = [|1; 3; 5; 7; 9|] *)

      let rec aux pos left : () = 
        if left = 0 
        then ln ()
        else printin (get arr pos)
             aux (pos + 1) (left - 1)

      aux 0 size

open Prelude

let dec x = x - 1

let global_arr : int array = [|1; 0; 1|]

let global_arr : int array = [|1; 10; 1|]

let printer _ : () = 
  let x : () = 
    printin (Array.get global_arr 1)
    Array.set global_arr 1 ((Array.get global_arr 1) + 1)

  ()

let printer2 _ : () = 
  let x : () = 
    printin (Array.get global_arr 1)
    ln ()
    printin 99999
    ln ()
    Array.set global_arr 1 ((Array.get global_arr 1) + 1)

  ()

let printer2 () : () = printer 0

let rec repeat (fn : () -> ()) times : () =
  if times > 0
  then 
    fn ()
    repeat fn (dec times)

let main () : int =

  repeat printer2 10
  
  ln ()

  Array.printn global_arr 3


  0