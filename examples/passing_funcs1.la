module Prelude =
  external ll_putint : int -> ()
  external ll_print_line : () -> ()
  external ll_get_ith_elem_of_int_array : int array -> int -> int
  external ll_set_ith_elem_of_int_array : int array -> int -> int -> ()
  external ll_new_int_array : int -> int array

  let ln () : () = ll_print_line ()

  let printi x : () = ll_putint x

  let printin x : () = ll_putint x
                       ln () 

  module Array = 
    let new size : int array = 
      ll_new_int_array size

    let set (arr : int array) ix elem : () = 
      ll_set_ith_elem_of_int_array  arr ix elem

    let get (arr : int array) ix = 
      ll_get_ith_elem_of_int_array arr ix

    let printn (arr : int array) size : () = 
      let rec aux (arr : int array) pos left : () = 
        if left = 0 
        then ln ()
        else printin (get arr pos)
             aux arr (pos + 1) (left - 1)

      aux arr 0 size

open Prelude

let fn1 () () x = x * x

let wrapper (fn : () -> () -> int -> int) x =
  fn () () 12

let wrapper2 (fn : () -> () -> int -> int) x =
  let fn1 () x = fn () () x 
  let fn2 x = fn1 () x 

  (fn2 10) + (fn1 () 2)

let main () : int =

  printin (wrapper fn1 4)
  (* printin (wrapper2 fn1 4) *)

  0